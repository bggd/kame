#include <kame/kame.hpp>
#include <cassert>
#include <string>
#include <vector>

#include <spdlog/spdlog.h>

using namespace kame::math;

const char* vert = R"(
#if __VERSION__ < 130
#define in attribute
#define out varying
#endif

in vec3 vPos;
in vec2 vUV;
out vec2 pUV;

uniform mat4 uModel;

void main() {
  gl_Position = uModel * vec4(vPos.x, vPos.y, vPos.z, 1.0);
  pUV = vUV;
}
)";

const char* frag = R"(
#if __VERSION__ < 130
#define in varying
#define FragColor gl_FragColor
#define texture(sampler, p) texture2D(sampler, p)
#else
out vec4 FragColor;
#endif

in vec2 pUV;
uniform sampler2D colorTexture;

void main() {
  FragColor = texture(colorTexture, pUV);
}
)";

extern unsigned char Image_0_png[];
unsigned int Image_0_png_len = 1335;

#include "../data/torus.h"

float deg2rad(float degree)
{
    return degree * (3.14159265358979323846F / 180.0F);
}

int main(int argc, char** argv)
{
    kame::kameInit();

    kame::sdl::WindowOGL win;
    win.setOglDebugMode(true);
    win.setFpsCap(1.0 / 60.0);
    win.openWindow();
    win.setVsync(true);

    std::string vs = kame::ogl::getGlslVersionString();
    vs += vert;
    std::string fs = kame::ogl::getGlslVersionString();
    fs += frag;
    auto* shader = kame::ogl::createShader(vs.c_str(), fs.c_str());

    auto* gltf = kame::gltf::loadGLTFFromMemory(examples_data_torus_gltf, examples_data_torus_gltf_len);

    std::vector<kame::math::Vector3> positions;
    std::vector<kame::math::Vector2> texcoords;
    std::vector<unsigned int> indices;

    for (auto& m : gltf->meshes)
    {
        auto offset = positions.size();
        for (auto& pri : m.primitives)
        {
            if (pri.hasIndices)
            {
                auto& acc = gltf->accessors[pri.indices];
                auto& bv = gltf->bufferViews[acc.bufferView];
                auto& b = gltf->buffers[bv.buffer];
                for (unsigned int i = 0; i < acc.count; ++i)
                {
                    if (acc.componentType == GL_UNSIGNED_BYTE)
                    {
                        auto e = ((unsigned char*)(b.decodedData.data() + bv.byteOffset + acc.byteOffset))[i];
                        indices.push_back(e + offset);
                    }
                    else if (acc.componentType == GL_UNSIGNED_SHORT)
                    {
                        auto e = ((unsigned short*)(b.decodedData.data() + bv.byteOffset + acc.byteOffset))[i];
                        indices.push_back(e + offset);
                    }
                    else if (acc.componentType == GL_UNSIGNED_INT)
                    {
                        auto e = ((unsigned int*)(b.decodedData.data() + bv.byteOffset + acc.byteOffset))[i];
                        indices.push_back(e + offset);
                    }
                }
            }
            for (auto& item : pri.attributes)
            {
                if (item.first == "POSITION")
                {
                    auto& acc = gltf->accessors[item.second];
                    auto& bv = gltf->bufferViews[acc.bufferView];
                    auto& b = gltf->buffers[bv.buffer];
                    for (unsigned int i = 0; i < acc.count; ++i)
                    {
                        auto v = ((kame::math::Vector3*)(b.decodedData.data() + bv.byteOffset + acc.byteOffset))[i];
                        positions.push_back(v);
                    }
                }
                else if (item.first == "TEXCOORD_0")
                {
                    auto& acc = gltf->accessors[item.second];
                    auto& bv = gltf->bufferViews[acc.bufferView];
                    auto& b = gltf->buffers[bv.buffer];
                    for (unsigned int i = 0; i < acc.count; ++i)
                    {
                        auto v = ((kame::math::Vector2*)(b.decodedData.data() + bv.byteOffset + acc.byteOffset))[i];
                        texcoords.push_back(v);
                    }
                }
            }
        }
    }
    kame::gltf::deleteGLTF(gltf);

    auto* vboPositions = kame::ogl::createVertexBuffer(positions.size() * 3 * sizeof(float), GL_STATIC_DRAW);
    vboPositions->setBuffer((const float*)&positions[0]);

    auto* vboTexcoords = kame::ogl::createVertexBuffer(texcoords.size() * 2 * sizeof(float), GL_STATIC_DRAW);
    vboTexcoords->setBuffer((const float*)&texcoords[0]);

    auto* iboIndices = kame::ogl::createIndexBuffer(indices.size() * sizeof(unsigned int), GL_STATIC_DRAW);
    iboIndices->setBuffer((const unsigned int*)&indices[0]);

    auto vao = kame::ogl::VertexArrayObjectBuilder()
                   .bindAttribute(shader->getAttribLocation("vPos"), vboPositions, 3, 3 * sizeof(float), 0)
                   .bindAttribute(shader->getAttribLocation("vUV"), vboTexcoords, 2, 2 * sizeof(float), 0)
                   .bindIndexBuffer(iboIndices)
                   .build();

    auto* tex = kame::ogl::loadTexture2DFromMemory(Image_0_png, Image_0_png_len);

    float angle = 0.0f;

    for (;;)
    {
        win.update();
        auto state = win.getState();
        if (state.isCloseRequest)
            break;
        kame::ogl::setViewport(0, 0, 640, 480);
        kame::ogl::setClearBuffer(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT, Vector4(0, 0, 0, 1));
        kame::ogl::setShader(shader);
        kame::ogl::BlendState blendState = kame::ogl::BlendStateBuilder()
                                               .blendEquation(GL_FUNC_ADD, GL_FUNC_ADD)
                                               .blendFunction(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA)
                                               .build();
        kame::ogl::DepthStencilState depthState = kame::ogl::DepthStencilStateBuilder()
                                                      .depthFunc(GL_LESS)
                                                      .build();
        kame::ogl::setBlendState(blendState);
        kame::ogl::setDepthStencilState(depthState);
        kame::ogl::setTexture2D(0, tex);
        angle += 1.0f;
        if (angle > 360.0f)
        {
            angle -= 360.0f;
        }
        auto R = kame::math::Matrix::createRotationY(deg2rad(angle));
        auto S = kame::math::Matrix::createScale(0.5f);
        shader->setMatrix("uModel", S * R);
        vao.drawElements(GL_TRIANGLES, indices.size(), GL_UNSIGNED_INT);
        win.swapWindow();
    }

    kame::ogl::deleteTexture2D(tex);
    kame::ogl::deleteIndexBuffer(iboIndices);
    kame::ogl::deleteVertexBuffer(vboTexcoords);
    kame::ogl::deleteVertexBuffer(vboPositions);
    kame::ogl::deleteShader(shader);

    win.closeWindow();
    kame::kameShutdown();
    return 0;
}

unsigned char Image_0_png[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc3, 0x3e, 0x61, 0xcb, 0x00, 0x00, 0x00,
    0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x13, 0x00, 0x00, 0x0b,
    0x13, 0x01, 0x00, 0x9a, 0x9c, 0x18, 0x00, 0x00, 0x04, 0xe9, 0x49, 0x44,
    0x41, 0x54, 0x78, 0x01, 0xed, 0x9d, 0xbd, 0x71, 0x1c, 0x31, 0x0c, 0x46,
    0x25, 0x8f, 0x22, 0x55, 0xe0, 0x1a, 0x54, 0xc5, 0x75, 0xa0, 0xec, 0x12,
    0x55, 0xe1, 0x0e, 0xd4, 0x81, 0xab, 0x50, 0x72, 0x99, 0x9a, 0x51, 0x0d,
    0xae, 0x40, 0xa9, 0x3c, 0x9b, 0x61, 0x38, 0x37, 0xbb, 0x47, 0x80, 0x20,
    0x40, 0xdc, 0x73, 0x74, 0xd4, 0x2e, 0xf1, 0xf3, 0x7d, 0x4f, 0x64, 0x70,
    0x03, 0xf9, 0xf1, 0x74, 0x3a, 0xfd, 0x3c, 0x04, 0xfe, 0x3b, 0x9f, 0xcf,
    0x81, 0xd9, 0x1f, 0x1e, 0x2e, 0x97, 0x4b, 0x68, 0xfe, 0xe8, 0xfe, 0x7f,
    0x85, 0x76, 0x4f, 0xf2, 0x70, 0x05, 0x00, 0x20, 0xdc, 0x82, 0xd8, 0x02,
    0x00, 0x20, 0x56, 0xff, 0xf0, 0xec, 0x00, 0x10, 0x6e, 0x41, 0x6c, 0x01,
    0x00, 0x10, 0xab, 0x7f, 0x78, 0x76, 0x00, 0x08, 0xb7, 0x20, 0xb6, 0x00,
    0x00, 0x88, 0xd5, 0x3f, 0x3c, 0x3b, 0x00, 0x84, 0x5b, 0x10, 0x5b, 0x00,
    0x00, 0xc4, 0xea, 0x1f, 0x9e, 0x1d, 0x00, 0xc2, 0x2d, 0x88, 0x2d, 0x00,
    0x00, 0x62, 0xf5, 0x0f, 0xcf, 0x6e, 0x06, 0xe0, 0xeb, 0xe3, 0x39, 0xb4,
    0x89, 0x7f, 0xaf, 0xef, 0xa1, 0xf9, 0x3f, 0xfe, 0x7c, 0x85, 0xe6, 0x7f,
    0x7d, 0xb7, 0xf5, 0x6f, 0x06, 0x20, 0xb4, 0x7b, 0x92, 0x9b, 0x15, 0x00,
    0x00, 0xb3, 0x84, 0x6b, 0x07, 0x78, 0xd2, 0x94, 0xdf, 0x1e, 0xfb, 0x72,
    0xfd, 0xf2, 0xf6, 0xad, 0x09, 0xd9, 0xb5, 0xa7, 0x3d, 0xf6, 0xe5, 0xfa,
    0xf7, 0xe7, 0x7b, 0x57, 0x2c, 0xcd, 0xcb, 0xed, 0xb1, 0x2f, 0xd7, 0x6f,
    0x7f, 0x5f, 0x34, 0x21, 0xbb, 0xf6, 0xb4, 0xc7, 0xbe, 0x5c, 0x7f, 0x76,
    0x5e, 0x09, 0x2a, 0x00, 0xa4, 0xc9, 0x9b, 0xf9, 0x72, 0xdd, 0xd5, 0x89,
    0xf2, 0x65, 0x69, 0xf2, 0x66, 0xbe, 0x5c, 0x2b, 0x43, 0x76, 0x6d, 0x93,
    0x26, 0x6f, 0xe6, 0xcb, 0x75, 0x57, 0x20, 0xe5, 0xcb, 0xd2, 0xe4, 0xcd,
    0x7c, 0xb9, 0xee, 0x0d, 0xc9, 0x15, 0xd0, 0xab, 0x58, 0xb1, 0xf7, 0x01,
    0xa0, 0x98, 0xa1, 0xbd, 0xed, 0x98, 0x01, 0x98, 0x7d, 0xfc, 0xb7, 0x0d,
    0xce, 0x3e, 0xfe, 0xdb, 0xfc, 0xb3, 0x8f, 0xff, 0x36, 0xbf, 0xe5, 0xf8,
    0xdf, 0x62, 0x99, 0x01, 0x68, 0x0b, 0x62, 0xbd, 0x96, 0x02, 0x00, 0xb0,
    0x96, 0x5f, 0xc3, 0xab, 0x05, 0x80, 0xe1, 0x92, 0xae, 0x15, 0x10, 0x00,
    0xd6, 0xf2, 0x6b, 0x78, 0xb5, 0x00, 0x30, 0x5c, 0xd2, 0xb5, 0x02, 0x02,
    0xc0, 0x5a, 0x7e, 0x0d, 0xaf, 0x16, 0x00, 0x86, 0x4b, 0xba, 0x56, 0x40,
    0x00, 0x58, 0xcb, 0xaf, 0xe1, 0xd5, 0x02, 0xc0, 0x70, 0x49, 0xd7, 0x0a,
    0x08, 0x00, 0x6b, 0xf9, 0x35, 0xbc, 0x5a, 0x00, 0x18, 0x2e, 0xe9, 0x5a,
    0x01, 0x01, 0x60, 0x2d, 0xbf, 0x86, 0x57, 0xfb, 0x14, 0x3d, 0x9f, 0x7e,
    0xef, 0xf3, 0xf9, 0xd1, 0xfd, 0x73, 0x02, 0x0c, 0xff, 0x9d, 0x5a, 0x2b,
    0x20, 0x00, 0xac, 0xe5, 0xd7, 0xf0, 0x6a, 0x01, 0x60, 0xb8, 0xa4, 0x6b,
    0x05, 0x04, 0x80, 0xb5, 0xfc, 0x1a, 0x5e, 0x2d, 0x00, 0x0c, 0x97, 0x74,
    0xad, 0x80, 0x00, 0xb0, 0x96, 0x5f, 0xc3, 0xab, 0x05, 0x80, 0xe1, 0x92,
    0xae, 0x15, 0x10, 0x00, 0xd6, 0xf2, 0x6b, 0x78, 0xb5, 0x00, 0x30, 0x5c,
    0xd2, 0xb5, 0x02, 0x02, 0xc0, 0x5a, 0x7e, 0x0d, 0xaf, 0x16, 0x00, 0x86,
    0x4b, 0xba, 0x56, 0x40, 0x33, 0x00, 0x72, 0x30, 0x33, 0xa2, 0x75, 0x39,
    0x98, 0x19, 0x91, 0x5f, 0x0e, 0x66, 0x46, 0xe4, 0xb7, 0xf6, 0x6f, 0x06,
    0x20, 0xa2, 0x69, 0x72, 0x8e, 0x53, 0x00, 0x00, 0xc6, 0x69, 0xb9, 0x64,
    0x24, 0xd5, 0x78, 0x78, 0x7b, 0xec, 0xcb, 0xf5, 0x8c, 0x59, 0xbd, 0xf6,
    0xd8, 0x93, 0xeb, 0x19, 0xb3, 0x7a, 0xed, 0xb1, 0x2f, 0xd7, 0xd6, 0x59,
    0xbd, 0x5b, 0x28, 0x92, 0xfd, 0x6e, 0xef, 0xcb, 0x75, 0x6f, 0xff, 0x2a,
    0x00, 0xa4, 0xc9, 0xcc, 0xe7, 0xdb, 0xe6, 0xf3, 0x6f, 0x31, 0xbc, 0x7d,
    0x47, 0x9a, 0xbc, 0x99, 0x2f, 0xd7, 0xed, 0xbb, 0x47, 0x6b, 0xae, 0x80,
    0x23, 0x85, 0x8a, 0x3f, 0x07, 0x80, 0xe2, 0x06, 0x1f, 0xb5, 0x67, 0x06,
    0x40, 0x5e, 0x07, 0x47, 0xc9, 0x3c, 0x9e, 0x5b, 0x8e, 0xbf, 0x11, 0xf5,
    0xcc, 0xb8, 0xf3, 0xf7, 0xea, 0xb4, 0xf6, 0x6f, 0x06, 0x60, 0xaf, 0x38,
    0x9e, 0xe5, 0x57, 0x00, 0x00, 0xf2, 0x7b, 0xe4, 0x5a, 0x21, 0x00, 0xb8,
    0xca, 0x9b, 0x3f, 0x38, 0x00, 0xe4, 0xf7, 0xc8, 0xb5, 0x42, 0x00, 0x70,
    0x95, 0x37, 0x7f, 0x70, 0x00, 0xc8, 0xef, 0x91, 0x6b, 0x85, 0x00, 0xe0,
    0x2a, 0x6f, 0xfe, 0xe0, 0x00, 0x90, 0xdf, 0x23, 0xd7, 0x0a, 0x01, 0xc0,
    0x55, 0xde, 0xfc, 0xc1, 0x01, 0x20, 0xbf, 0x47, 0xae, 0x15, 0x02, 0x80,
    0xab, 0xbc, 0xf9, 0x83, 0x03, 0x40, 0x7e, 0x8f, 0x5c, 0x2b, 0x7c, 0x3c,
    0x9d, 0x4e, 0x3f, 0xae, 0x19, 0x0e, 0x82, 0xf3, 0xf7, 0x09, 0xce, 0x07,
    0x0a, 0xf9, 0x3e, 0xe6, 0x04, 0xf0, 0xd5, 0x37, 0x7d, 0x74, 0x00, 0x48,
    0x6f, 0x91, 0x6f, 0x81, 0x00, 0xe0, 0xab, 0x6f, 0xfa, 0xe8, 0x00, 0x90,
    0xde, 0x22, 0xdf, 0x02, 0x01, 0xc0, 0x57, 0xdf, 0xf4, 0xd1, 0x01, 0x20,
    0xbd, 0x45, 0xbe, 0x05, 0x02, 0x80, 0xaf, 0xbe, 0xe9, 0xa3, 0x03, 0x40,
    0x7a, 0x8b, 0x7c, 0x0b, 0x04, 0x00, 0x5f, 0x7d, 0xd3, 0x47, 0x07, 0x80,
    0xf4, 0x16, 0xf9, 0x16, 0x08, 0x00, 0xbe, 0xfa, 0xa6, 0x8f, 0x6e, 0x06,
    0x40, 0x0e, 0x26, 0x46, 0x74, 0x2b, 0x07, 0x33, 0x23, 0xf2, 0x47, 0xf7,
    0x2f, 0x07, 0x73, 0x35, 0xfd, 0x9b, 0x01, 0xd0, 0x24, 0x65, 0x4f, 0x1e,
    0x05, 0x00, 0x20, 0x8f, 0x17, 0x21, 0x95, 0xa8, 0xbe, 0x0e, 0xde, 0x3b,
    0xf6, 0x7a, 0x67, 0xd5, 0x34, 0x5f, 0x07, 0xef, 0x1d, 0xfb, 0xbd, 0xb3,
    0x7a, 0x9a, 0x3f, 0xd7, 0x1e, 0xdd, 0xff, 0xde, 0xb1, 0xdf, 0x3b, 0xab,
    0xa9, 0x02, 0x40, 0xa2, 0xba, 0x89, 0xd1, 0x6b, 0xba, 0xdc, 0xaf, 0x01,
    0x40, 0xee, 0xdf, 0x60, 0xe8, 0x35, 0x5d, 0xee, 0xd7, 0x00, 0x20, 0xf7,
    0x47, 0xf7, 0x6f, 0xfd, 0xfb, 0x0c, 0x5c, 0x01, 0xd2, 0xcd, 0x3b, 0xfc,
    0x0c, 0x00, 0x77, 0x68, 0xba, 0x6c, 0xd9, 0x7c, 0x05, 0xc8, 0x60, 0x9a,
    0xcf, 0xd6, 0x2b, 0x40, 0x93, 0x53, 0xee, 0xb1, 0x5e, 0x01, 0x32, 0x96,
    0xe6, 0x73, 0x74, 0xff, 0x9c, 0x00, 0x1a, 0xd7, 0x0a, 0xed, 0x01, 0x80,
    0x42, 0x66, 0x6a, 0x5a, 0x01, 0x00, 0x8d, 0x6a, 0x85, 0xf6, 0x00, 0x40,
    0x21, 0x33, 0x35, 0xad, 0x00, 0x80, 0x46, 0xb5, 0x42, 0x7b, 0x00, 0xa0,
    0x90, 0x99, 0x9a, 0x56, 0x00, 0x40, 0xa3, 0x5a, 0xa1, 0x3d, 0x00, 0x50,
    0xc8, 0x4c, 0x4d, 0x2b, 0x00, 0xa0, 0x51, 0xad, 0xd0, 0x1e, 0x00, 0x28,
    0x64, 0xa6, 0xa6, 0x15, 0x00, 0xd0, 0xa8, 0x56, 0x68, 0x0f, 0x00, 0x14,
    0x32, 0x53, 0xd3, 0xca, 0x53, 0xf4, 0x97, 0x11, 0xf7, 0xfe, 0x65, 0x4c,
    0x74, 0xff, 0x9c, 0x00, 0x9a, 0x5f, 0x9b, 0x42, 0x7b, 0x00, 0xa0, 0x90,
    0x99, 0x9a, 0x56, 0x00, 0x40, 0xa3, 0x5a, 0xa1, 0x3d, 0x00, 0x50, 0xc8,
    0x4c, 0x4d, 0x2b, 0x00, 0xa0, 0x51, 0xad, 0xd0, 0x1e, 0x00, 0x28, 0x64,
    0xa6, 0xa6, 0x15, 0x00, 0xd0, 0xa8, 0x56, 0x68, 0x0f, 0x00, 0x14, 0x32,
    0x53, 0xd3, 0x0a, 0x00, 0x68, 0x54, 0x2b, 0xb4, 0x07, 0x00, 0x0a, 0x99,
    0xa9, 0x69, 0x05, 0x00, 0x34, 0xaa, 0x15, 0xda, 0x63, 0x06, 0x60, 0x6f,
    0x50, 0x73, 0x86, 0x4e, 0x7b, 0x83, 0x9a, 0x33, 0xf2, 0xef, 0x0d, 0x6a,
    0xce, 0xc8, 0xff, 0xf5, 0xf1, 0x6c, 0x4a, 0x63, 0x06, 0xc0, 0x94, 0x9d,
    0xcd, 0xe1, 0x0a, 0x00, 0x40, 0xb8, 0x05, 0xb1, 0x05, 0xa8, 0xfe, 0xfb,
    0xf8, 0xf6, 0xd8, 0x97, 0x6b, 0xcb, 0xa8, 0xf6, 0xad, 0x52, 0xb4, 0xc7,
    0xbe, 0x5c, 0x5b, 0x46, 0xd5, 0x6f, 0xcd, 0xdf, 0x1e, 0xfb, 0x72, 0xdd,
    0x3b, 0x9f, 0x7f, 0x6b, 0x4e, 0xf9, 0x5e, 0x7b, 0xec, 0xcb, 0xf5, 0xcb,
    0xdb, 0xb7, 0x7c, 0xf5, 0xf0, 0xb3, 0x0a, 0x00, 0x69, 0xb2, 0x75, 0x3e,
    0xff, 0xb0, 0xc2, 0x2b, 0x2f, 0x48, 0x93, 0xad, 0xf3, 0xf9, 0x57, 0xc2,
    0x1f, 0xfe, 0x48, 0x9a, 0x6c, 0x9d, 0xcf, 0x3f, 0x4c, 0x76, 0xe5, 0x05,
    0x69, 0xf2, 0x66, 0xbe, 0x5c, 0x5f, 0x79, 0x7d, 0xf7, 0x47, 0x5c, 0x01,
    0xbb, 0xf2, 0xd4, 0x7f, 0x08, 0x00, 0xf5, 0x3d, 0xde, 0xed, 0xd0, 0x0c,
    0x80, 0xbc, 0x0e, 0x76, 0x33, 0x39, 0x3d, 0x94, 0xd7, 0x81, 0x53, 0x8a,
    0xdd, 0xb0, 0xf2, 0x3a, 0xd8, 0x7d, 0xd1, 0xe9, 0xa1, 0xe5, 0xf8, 0xdf,
    0x4a, 0x32, 0x03, 0xe0, 0xd4, 0x17, 0x61, 0x27, 0x29, 0x00, 0x00, 0x93,
    0x84, 0xce, 0x9a, 0x06, 0x00, 0xb2, 0x3a, 0x33, 0xa9, 0x2e, 0x00, 0x98,
    0x24, 0x74, 0xd6, 0x34, 0x00, 0x90, 0xd5, 0x99, 0x49, 0x75, 0x01, 0xc0,
    0x24, 0xa1, 0xb3, 0xa6, 0x01, 0x80, 0xac, 0xce, 0x4c, 0xaa, 0x0b, 0x00,
    0x26, 0x09, 0x9d, 0x35, 0x0d, 0x00, 0x64, 0x75, 0x66, 0x52, 0x5d, 0x00,
    0x30, 0x49, 0xe8, 0xac, 0x69, 0x00, 0x20, 0xab, 0x33, 0x93, 0xea, 0x02,
    0x80, 0x49, 0x42, 0x67, 0x4d, 0xf3, 0x1f, 0x7d, 0xed, 0xd8, 0xaf, 0x0a,
    0xf3, 0x58, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae,
    0x42, 0x60, 0x82};
